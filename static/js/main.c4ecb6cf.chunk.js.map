{"version":3,"sources":["components/Wrapper/index.js","components/Grid/index.js","components/Jumbotron/index.js","components/SearchForm/index.js","components/Card/index.js","components/SearchHistory/index.js","components/CurrentWeather/index.js","components/ForecastCard/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","Container","fluid","children","Row","Jumbotron","id","SearchForm","htmlFor","type","name","onChange","handleInputChange","value","searchInput","onClick","handleFormSubmit","Card","SearchHistory","handleClick","CurrentWeather","cityName","currentDate","src","iconURL","alt","temp","humidity","windSpeed","style","uviStyle","uvi","ForecastCard","date","apikey","city","axios","get","lat","lon","App","useState","setSearchInput","cities","setCities","currentWeatherCard","setCurrentWeatherCard","forecastCards","setForecastCards","useEffect","storedCities","JSON","parse","localStorage","getItem","event","runAPIs","target","API","then","response","moment","format","data","main","wind","speed","weather","icon","coord","uviResponse","current","borderRadius","fontSize","padding","backgroundColor","currentHour","currentTimeBlock","forecasts","list","filter","element","dt_txt","includes","marginTop","marginLeft","marginRight","map","forecast","key","dt","preventDefault","unshift","uniqueCities","Set","newCities","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4ecb6cf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Exporting the Container, Row components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n    return (\n        <header className=\"jumbotron\">\n            <h1 id=\"title\">Weather Dashboard</h1>\n        </header>\n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport { Row } from \"../Grid\";\nimport \"./style.css\";\n\nfunction SearchForm(props) {\n    return (\n        <form>\n            <label htmlFor=\"searchInput\"><h5>Search for a City:</h5></label>\n            <Row>\n                <div className=\"col-9 col-sm-9\" id=\"searchBar\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        name=\"searchInput\"\n                        id=\"searchInput\"\n                        onChange={props.handleInputChange}\n                        value={props.searchInput}\n                    />\n                </div>\n                <div className=\"col-3 col-sm-3\" id=\"searchButton\">\n                    <button type=\"submit\" className=\"btn btn-primary\" id=\"searchIcon\" onClick={props.handleFormSubmit}><i className=\"fas fa-search\"></i></button>\n                </div>\n            </Row>\n        </form>\n    );\n}\n\nexport default SearchForm;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card({ children }) {\n    return (\n       <div className=\"card\">\n           {children}\n       </div> \n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nfunction SearchHistory(props) {\n    return (\n        <Card>\n            <div className=\"card-body searchHistoryCard\">\n                <button\n                    className=\"btn btn-link city\"\n                    value={props.searchInput}\n                    onClick={props.handleClick}\n                >\n                    {props.searchInput}\n                </button>\n            </div>\n        </Card>\n    );\n}\n\nexport default SearchHistory;","import React from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nfunction CurrentWeather(props) {\n    return (\n        <Card>\n            <div className=\"card-body currentWeatherCard\">\n                <h2>{props.cityName} ({props.currentDate}) <img src={props.iconURL} alt=\"currentWeatherIcon\"/></h2>\n                <p className=\"lead\">Temperature: {props.temp} &deg;F</p>\n                <p className=\"lead\">Humidity: {props.humidity}%</p>\n                <p className=\"lead\">Wind Speed: {props.windSpeed} MPH</p>\n                <p className=\"lead\">UV Index: {<span style={props.uviStyle}>{props.uvi}</span>}</p>\n            </div>\n        </Card>\n    );\n}\n\nexport default CurrentWeather;","import React from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nfunction ForecastCard(props) {\n    return (\n        <div className=\"col d-flex align-items-stretch\">\n            <Card>\n                <div className=\"card-body forecastCard\">\n                    <h5>{props.date}</h5>\n                    <img src={props.iconURL} alt=\"fiveDayWeatherIcon\" />\n                    <p className=\"lead\">Temp: {props.temp} &deg;F</p>\n                    <p className=\"lead\">Humidity: {props.humidity}%</p>\n                </div>\n            </Card>\n        </div>\n    );\n}\n\nexport default ForecastCard;","import axios from \"axios\";\n\nconst apikey = \"572d14321ae6789e9c768be6fb36520d\";\n\nexport default {\n    // Get current weather for given city\n    getCurrentWeather: city => {\n        return axios(\"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&units=imperial&apikey=\" + apikey);\n    },\n    getForecast: city => {\n        return axios.get(\"https://api.openweathermap.org/data/2.5/forecast?q=\" + city + \"&units=imperial&apikey=\" + apikey);\n    },\n    getUVI: (lat, lon) => {\n        return axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&apikey=\" + apikey);\n    }\n};","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Wrapper from \"./components/Wrapper\";\nimport { Container, Row } from \"./components/Grid\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport SearchForm from \"./components/SearchForm\";\nimport SearchHistory from \"./components/SearchHistory\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport ForecastCard from \"./components/ForecastCard\";\nimport API from \"./utils/API\";\n\nfunction App() {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [cities, setCities] = useState([]);\n  const [currentWeatherCard, setCurrentWeatherCard] = useState();\n  const [forecastCards, setForecastCards] = useState();\n\n  useEffect(() => {\n    // localStorage.clear();\n    // Grab any stored cities\n    const storedCities = JSON.parse(localStorage.getItem(\"cities\"));\n\n    // If storedCities is not null, set cities state to stored cities and render cities\n    if (storedCities !== null) {\n      setCities(storedCities);\n    }\n  }, []);\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n    setSearchInput(value);\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    // Push user-inputted city into cities array, unshift to move them to beginning of array\n    cities.unshift(searchInput);\n\n    // Get rid of duplicate entries\n    const uniqueCities = new Set(cities);\n    const newCities = [...uniqueCities];\n\n    // Save cities to local storage\n    localStorage.setItem(\"cities\", JSON.stringify(cities));\n\n    // Clear search input form\n    setSearchInput(\"\");\n\n    // Set cities array to the newCities array with duplicates removed\n    setCities(newCities);\n\n    // Make API calls\n    runAPIs(searchInput);\n  };\n\n  const handleClick = (event) => {\n    runAPIs(event.target.value);\n  };\n\n  const runAPIs = (city) => {\n    // Make an API call to openweathermap.org\n    API.getCurrentWeather(city).then((response) => {\n      const currentDate = moment().format(\"MM/DD/YYYY\");\n      const cityName = response.data.name;\n      const temp = response.data.main.temp;\n      const humidity = response.data.main.humidity;\n      const windSpeed = response.data.wind.speed;\n      const iconURL =\n        \"https://openweathermap.org/img/w/\" +\n        response.data.weather[0].icon +\n        \".png\";\n\n      const lat = response.data.coord.lat;\n      const lon = response.data.coord.lon;\n\n      API.getUVI(lat, lon).then((uviResponse) => {\n        const uvi = uviResponse.data.current.uvi;\n\n        const uviStyle = {\n          borderRadius: \"0.25rem\",\n          fontSize: \"1rem\",\n          padding: \"5px\",\n        };\n\n        if (uvi < 3) {\n          // Give it the color of green\n          uviStyle.backgroundColor = \"#99cc00\";\n        } else if (uvi >= 3 && uvi < 6) {\n          // Give it the color of yellow\n          uviStyle.backgroundColor = \"#ffff01\";\n        } else if (uvi >= 6 && uvi < 8) {\n          // Give it the color of orange\n          uviStyle.backgroundColor = \"#ff9928\";\n        } else if (uvi >= 8 && uvi < 11) {\n          // Give it the color of red\n          uviStyle.backgroundColor = \"#ff0100\";\n        } else if (uvi >= 11) {\n          // Give it the color of purple\n          uviStyle.backgroundColor = \"#be00be\";\n        }\n\n        setCurrentWeatherCard(\n          <CurrentWeather\n            cityName={cityName}\n            currentDate={currentDate}\n            iconURL={iconURL}\n            temp={temp}\n            humidity={humidity}\n            windSpeed={windSpeed}\n            uvi={uvi}\n            uviStyle={uviStyle}\n          />\n        );\n      });\n    });\n\n    API.getForecast(city).then((response) => {\n      const currentHour = moment().format(\"HH\");\n\n      // Set default time block of three hours to 12 AM\n      let currentTimeBlock = \"00:00:00\";\n\n      // Change the current time block of three hours based on currentHour\n      if (currentHour >= 0 && currentHour < 3) {\n        currentTimeBlock = \"00:00:00\";\n      } else if (currentHour >= 3 && currentHour < 6) {\n        currentTimeBlock = \"03:00:00\";\n      } else if (currentHour >= 6 && currentHour < 9) {\n        currentTimeBlock = \"06:00:00\";\n      } else if (currentHour >= 9 && currentHour < 12) {\n        currentTimeBlock = \"09:00:00\";\n      } else if (currentHour >= 12 && currentHour < 15) {\n        currentTimeBlock = \"12:00:00\";\n      } else if (currentHour >= 15 && currentHour < 18) {\n        currentTimeBlock = \"15:00:00\";\n      } else if (currentHour >= 18 && currentHour < 21) {\n        currentTimeBlock = \"18:00:00\";\n      } else if (currentHour >= 21 && currentHour < 24) {\n        currentTimeBlock = \"21:00:00\";\n      }\n\n      const forecasts = response.data.list.filter((element) =>\n        element.dt_txt.includes(currentTimeBlock)\n      );\n\n      setForecastCards(\n        <div className=\"col-12\">\n          <h3 style={{ marginTop: \"20px\" }}>5-Day Forecast</h3>\n          <div\n            className=\"row\"\n            style={{ marginLeft: \"-15px\", marginRight: \"-15px\" }}\n          >\n            {forecasts.map((forecast) => (\n              <ForecastCard\n                key={forecast.dt}\n                date={moment(forecast.dt_txt).format(\"MM/DD/YYYY\")}\n                iconURL={\n                  \"https://openweathermap.org/img/w/\" +\n                  forecast.weather[0].icon +\n                  \".png\"\n                }\n                temp={forecast.main.temp}\n                humidity={forecast.main.humidity}\n              />\n            ))}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <Wrapper>\n      <Jumbotron />\n      <Row>\n        <div className=\"sidenav col-sm-3\">\n          <SearchForm\n            handleInputChange={handleInputChange}\n            handleFormSubmit={handleFormSubmit}\n            searchInput={searchInput}\n          />\n          {cities.map((city) => (\n            <SearchHistory\n              key={city}\n              searchInput={city}\n              handleClick={handleClick}\n            />\n          ))}\n        </div>\n        <div className=\"col-sm-9\">\n          <Container>\n            <Row>\n              <div className=\"col-12\">{currentWeatherCard}</div>\n              {forecastCards}\n            </Row>\n          </Container>\n        </div>\n      </Row>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}